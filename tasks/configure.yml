# =============================================================================
#
# - Copyright (C) 2016     George Li <yongxinl@outlook.com>
#
# - This is part of HomeVault imagebuilder project.
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# =============================================================================

---
- name: add {{ install_role_name }} domain to localhost
  lineinfile:
    dest: "/etc/hosts"
    line: '127.0.0.1  {{ mediawiki_server }}'
    state: present

- name: check if php 7.x installed
  stat:
    path: "/etc/php/7.1/fpm/php.ini"
  register: php7_exist

- name: update php.ini configuration (php 7.x)
  lineinfile:
    dest: '/etc/php/7.1/fpm/php.ini'
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regxp: '^post_max_size.*', line: 'post_max_size = 768M' }
    - { regxp: '^upload_max_filesize.*', line: 'upload_max_filesize = 768M' }
    - { regxp: '^allow_url_fopen.*', line: 'allow_url_fopen = off' }
    - { regxp: '^session.use_trans_sid.*', line: 'session.use_trans_sid = 0' }    
    - { regxp: '^;opcache.enable.*', line: 'opcache.enable = 1' }
    - { regxp: '^;opcache.enable_cli.*', line: 'opcache.enable_cli = 1' }
    - { regxp: '^;opcache.memory_consumption.*', line: 'opcache.;opcache.memory_consumption = 64' }
    - { regxp: '^;opcache.interned_strings_buffer.*', line: 'opcache.interned_strings_buffer = 8' }
    - { regxp: '^;opcache.max_accelerated_files.*', line: 'opcache.max_accelerated_files = 8000' }
    - { regxp: '^;opcache.max_wasted_percentage.*', line: 'opcache.max_wasted_percentage = 5' }
    - { regxp: '^;opcache.validate_timestamps.*', line: 'opcache.validate_timestamps = 1' }
    - { regxp: '^;opcache.revalidate_freq.*', line: 'opcache.revalidate_freq = 60' }
    - { regxp: '^;opcache.fast_shutdown.*', line: 'opcache.fast_shutdown = 1' }
  when: php7_exist.stat.exists == True

- name: start MySQL database server
  service:
    name: mysql
    state: started

- name: generate db user password for {{ install_role_name }}
  command: /usr/bin/openssl rand -base64 16
  register: wiki_db_passwd

- name: remove existing {{ install_role_name }} database user
  mysql_user:
    name: "{{ mediawiki_db_user }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    state: absent

- name: remove existing {{ install_role_name }} database
  mysql_db:
    name: "{{ mediawiki_db_name }}"
    login_user: root
    login_password: "{{ target_root_password }}"    
    state: absent

- name: create {{ install_role_name }} db user
  mysql_user:
    name: "{{ mediawiki_db_user }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    password: "{{ wiki_db_passwd.stdout }}"
    priv: "{{ mediawiki_db_name }}.*:ALL"
    state: present

- name: create {{ install_role_name }} database
  mysql_db:
    name: "{{ mediawiki_db_name }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    collation: "utf8_general_ci"
    encoding: "utf8"
    state: present

- name: temporary stop NTP services before changing system date
  service:
    name: ntp
    state: stopped

- name: change system date before initialize database
  command: date --set 'Oct 11 2016'

- name: initialize {{ install_role_name }} database
  command: >
    php {{ mediawiki_root }}/maintenance/install.php \
      --dbuser {{ mediawiki_db_user }} --dbpass {{ wiki_db_passwd.stdout }} \
      --dbname {{ mediawiki_db_name }} --dbserver localhost --dbtype mysql --dbprefix wiki_ \
      --email {{ mediawiki_admin_email }} \
      --installdbuser {{ mediawiki_db_user }} --installdbpass {{ wiki_db_passwd.stdout }} \
      --server http://{{ mediawiki_server }} --pass {{ mediawiki_admin_password }} \
      {{ mediawiki_admin_user }}
    chdir={{ mediawiki_root }}

- name: upload {{ install_role_name }} configuration files
  template:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
    backup: yes
  with_items: "{{ mediawiki_configuration }}"

- name: create database backup directory
  file:
    path: "{{ mediawiki_root }}/dbs"
    state: directory
    mode: 0755

- name: create first {{ install_role_name }} database
  mysql_db:
    name: "{{ mediawiki_db_name }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    state: dump
    target: "{{ mediawiki_root }}/dbs/{{ install_role_name }}_REL1_{{ mediawiki_version.split('_')[1] }}_emptydb.sql"

- name: Enable {{ install_role_name }} Flow extension in all namespace
  shell:  "{{ item }}
          chdir={{ mediawiki_root }}"
  with_items:
    - php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=revision
    - php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=archive
    - php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=page
    - php maintenance/update.php --quick

- name: remove .git recursively from installation
  shell:  "{{ item }}
          chdir={{ mediawiki_root }}"
  with_items:
    - "find . ! -name services | grep .git | xargs rm -rf"
  when: mediawiki_remove_git

- name: resync system date with public NTP services
  command: ntpdate 0.au.pool.ntp.org

- block:
  - name: start related system services
    service:
      name: ntp
      state: restarted
  - service:
      name: nginx
      state: restarted
  - service:
      name: php7.1-fpm
      state: restarted
  - service:
      name: parsoid
      enabled: yes
      state: restarted