# =============================================================================
#
# - Copyright (C) 2016     George Li <yongxinl@outlook.com>
#
# - This is part of HomeVault imagebuilder project.
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# =============================================================================

---
- name: install required {{ ansible_distribution }} packages
  package: 
    name: "{{ item }}"
    state: present
  register: install_pkgs
  until: install_pkgs|success
  retries: 2
  delay: 5
  with_items: "{{ mediawiki_base_packages }}"

- name: create {{ install_role_name }} root directory
  file:
    path: "{{ mediawiki_root.split('/')[0:-1]|join('/') }}"
    state: directory
    mode: 0644
  when: wiki_status.matched|int == 0

- name: clone & update {{ install_role_name }} core from repository
  git:
    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/core.git"
    dest: "{{ mediawiki_root }}"
    version: "{{ mediawiki_version }}"
    depth: 1
    force: yes
    update: yes

- name: download php composer (required by {{ install_role_name }})
  get_url:
    url: "https://getcomposer.org/installer"
    dest: "{{ mediawiki_root }}/composer-setup.php"
  when: wiki_status.matched|int == 0

- name: install php composer (required by {{ install_role_name }})
  command: "{{ item }} chdir={{ mediawiki_root }}"
  with_items:
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
  when: wiki_status.matched|int == 0

- name: clone & update vendor from {{ install_role_name }} repository
  command:  "{{ item }}
            chdir={{ mediawiki_root }}"
  with_items:
    - php {{ mediawiki_root }}/composer.phar install --no-dev

- name: cleanup {{ install_role_name }} skins before clone
  file:
    path: "{{ mediawiki_root }}/skins/{{ item.name }}"
    state: absent
  with_items: "{{ mediawiki_core_skins }}"
  when: mediawiki_version == 'REL1_29' and wiki_status.matched|int == 0

- name: clone & update skins from {{ install_role_name }} repository
  git:
    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/skins/{{ item.name }}.git"
    dest: "{{ mediawiki_root }}/skins/{{ item.name }}"
    version: "{{ mediawiki_version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_core_skins }}"

- name: clone & update skins from 3rd-party repository
  git:
    repo: "{{ item.repo }}"
    dest: "{{ mediawiki_root }}/skins/{{ item.name }}"
    version: "{{ item.version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_3rdparty_skins }}"

- name: cleanup {{ install_role_name }} extension before clone
  file:
    path: "{{ mediawiki_root }}/extensions/{{ item.name }}"
    state: absent
  with_items: "{{ mediawiki_core_extensions }}"
  when: mediawiki_version == 'REL1_29' and wiki_status.matched|int == 0

- name: clone extension from {{ install_role_name }} repository
  git:
    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/extensions/{{ item.name }}.git"
    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
    version: "{{ mediawiki_version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_core_extensions }}"

- name: clone & update extension from 3rd-party repository
  git:
    repo: "{{ item.repo }}"
    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
    version: "{{ item.version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_3rdparty_extensions }}"

- name: initialize {{ install_role_name }} extension and submodule
  command: "git submodule update --init
            chdir={{ mediawiki_root }}/extensions/{{ item.name }}"
  with_items: "{{ mediawiki_core_extensions }}"

- name: initialize {{ install_role_name }} extension and submodule
  command: "php {{ mediawiki_root }}/composer.phar install
            chdir={{ mediawiki_root }}/extensions/{{ item.name }}"
  with_items: "{{ mediawiki_extension_dependency }}"

- name: update required packages (composer)
  command: "php {{ mediawiki_root }}/composer.phar require {{ item.name }}:{{ item.version }} {{ item.option|default('') }}
            chdir={{ mediawiki_root }}"
  with_items: "{{ mediawiki_extension_bycomposer }}"
  when: wiki_status.matched|int == 0

- name: clone & update CKeditor from 3rd-party repository
  git:
    repo: "{{ item.repo }}"
    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
    version: "{{ item.version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_Editor_CKeditor }}"
  when: mediawiki_Editor == "CKeditor" and wiki_status.matched|int == 0

- name: update CKeditor extension
  command: "{{ item }}
            chdir={{ mediawiki_root }}/extensions"
  with_items:
    - mv {{ mediawiki_root }}/extensions/WYSIWYG-CKeditor/WYSIWYG {{ mediawiki_root }}/extensions
    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG-CKeditor
    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG/ckeditor_source
  when: mediawiki_Editor == "CKeditor" and wiki_status.matched|int == 0

- name: hide toolbar when CKeditor is active
  blockinfile:
    dest: "{{ mediawiki_root }}/extensions/WikiEditor/modules/ext.wikiEditor.toolbar.js"
    insertbefore: "^}*"
    marker: "// {mark} MANAGED {{ install_role_name }} BLOCK"
    owner: root
    group: root
    mode: 0644
    state: present
    create: yes
    backup: no
    block: |
        // Hide WikiEditor toolbar in case CKeditor WYSIWYG mode is active
        if ( mw.config.get('useWikiEditor') ) {
          if ( mw.config.get('showFCKEditor') & mw.config.get('RTE_VISIBLE') )
            { $('#wikiEditor-ui-toolbar').hide(); }
          else
            { $('#wikiEditor-ui-toolbar').show(); }
        }
  when: mediawiki_Editor == "CKeditor" and wiki_status.matched|int == 0

- name: clone & update {{ install_role_name }} VisualEditor
  git:
    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/extensions/{{ item.name }}.git"
    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
    version: "{{ mediawiki_version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_Editor_VE_extensions }}"
  when: mediawiki_Editor == "VisualEditor"

- name: initialize {{ install_role_name }} VisualEditor extension and submodule
  command: "git submodule update --init
            chdir={{ mediawiki_root }}/extensions/{{ item.name }}"
  with_items: "{{ mediawiki_Editor_VE_extensions }}"
  when: mediawiki_Editor == "VisualEditor"

- name: create {{ install_role_name }} services directory
  file:
    path: "{{ mediawiki_root.split('/')[0:-1]|join('/') }}services"
    state: directory
    mode: 0644
  when: wiki_status.matched|int == 0

- name: clone & update {{ install_role_name }} Parsoid Services
  git:
    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/services/{{ item.name }}.git"
    dest: "{{ mediawiki_root }}/services/{{ item.name }}"
    version: "{{ item.version }}"
    depth: 1
    force: yes
    update: yes
  with_items: "{{ mediawiki_Editor_VE_services }}"
  when: mediawiki_Editor == "VisualEditor"

- name: initialize {{ install_role_name }} Parsoid Services
  shell:  "{{ item }}
          chdir={{ mediawiki_root }}/services/parsoid"
  with_items:
    - npm install
  when: mediawiki_Editor == "VisualEditor"

- name: hide domain name in login page
  blockinfile:
    dest: "{{ mediawiki_root }}/skins/Vector/components/common.less"
    marker: "/* {mark} MANAGED {{ install_role_name }} BLOCK */"
    owner: root
    group: root
    mode: 0644
    state: present
    create: yes
    backup: no
    block: |
        /* hide user domain from Login page */
        /* REL1_26 */
        #mw-user-domain-section.mw-ui-vform-field {
                display: none;
        }
        /* REL1_27 */
        #mw-input-wpDomain {
            display: none;
        }

- name: copy {{ install_role_name }} customization files
  copy:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
    backup: yes
  with_items: "{{ mediawiki_customization }}"

- name: cleanup {{ install_role_name }} installation
  shell:  "{{ item }}
          chdir={{ mediawiki_root }}"
  with_items:
    - rm -f COPYING CREDITS FAQ HISTORY INSTALL README README.mediawiki UPGRADE
    - rm -rf docs tests
    - find {{ mediawiki_root }}/languages/i18n/ -type f -not \( -iname 'en*' -or -iname 'zh*' \) | xargs rm -f
    - find . -print | while read filename; do touch -d 'Oct 11 2016' "$filename"; done
    - tar -czvf ../mediawiki_{{ mediawiki_version|lower }}_setup_$(date '+%Y%m%d').tar.gz ../wiki
  when: wiki_status.matched|int == 0

- name: cleanup {{ install_role_name }} installation
  shell:  "{{ item }}
          chdir={{ mediawiki_root }}"
  with_items:
    - rm -f COPYING CREDITS FAQ HISTORY INSTALL README README.mediawiki UPGRADE
    - rm -rf docs tests
    - find {{ mediawiki_root }}/languages/i18n/ -type f -not \( -iname 'en*' -or -iname 'zh*' \) | xargs rm -f
    - tar -czvf ../mediawiki_{{ mediawiki_version|lower }}_backup_$(date '+%Y%m%d').tar.gz ../wiki
  when: wiki_status.matched|int != 0
