# =============================================================================
#
# - Copyright (C) 2016     George Li <yongxinl@outlook.com>
#
# - This is part of HomeVault imagebuilder project.
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# =============================================================================

---
- name: add {{ install_role_name }} domain to localhost
  lineinfile:
    dest: "/etc/hosts"
    line: '127.0.0.1  {{ mediawiki_server }}'
    state: present

- name: check if php 5.x installed
  stat:
    path: "/etc/php5/fpm/php.ini"
  register: php5_exist

- name: update php.ini configuration (php 5.x)
  lineinfile:
    dest: '/etc/php5/fpm/php.ini'
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regxp: '^post_max_size.*', line: 'post_max_size = 768M' }
    - { regxp: '^upload_max_filesize.*', line: 'upload_max_filesize = 768M' }
    - { regxp: '^allow_url_fopen.*', line: 'allow_url_fopen = off' }
    - { regxp: '^session.use_trans_sid.*', line: 'session.use_trans_sid = 0' }
    - { regxp: '^;opcache.enable.*', line: 'opcache.enable = 1' }
    - { regxp: '^;opcache.enable_cli.*', line: 'opcache.enable_cli = 1' }
    - { regxp: '^;opcache.memory_consumption.*', line: 'opcache.;opcache.memory_consumption = 64' }
    - { regxp: '^;opcache.interned_strings_buffer.*', line: 'opcache.interned_strings_buffer = 8' }
    - { regxp: '^;opcache.max_accelerated_files.*', line: 'opcache.max_accelerated_files = 8000' }
    - { regxp: '^;opcache.max_wasted_percentage.*', line: 'opcache.max_wasted_percentage = 5' }
    - { regxp: '^;opcache.validate_timestamps.*', line: 'opcache.validate_timestamps = 1' }
    - { regxp: '^;opcache.revalidate_freq.*', line: 'opcache.revalidate_freq = 60' }
    - { regxp: '^;opcache.fast_shutdown.*', line: 'opcache.fast_shutdown = 1' }
  when: php5_exist.stat.exists == True
  
- name: check if php 7.x installed
  stat:
    path: "/etc/php/7.0/fpm/php.ini"
  register: php7_exist

- name: update php.ini configuration (php 7.x)
  lineinfile:
    dest: '/etc/php/7.0/fpm/php.ini'
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regxp: '^post_max_size.*', line: 'post_max_size = 768M' }
    - { regxp: '^upload_max_filesize.*', line: 'upload_max_filesize = 768M' }
    - { regxp: '^allow_url_fopen.*', line: 'allow_url_fopen = off' }
    - { regxp: '^session.use_trans_sid.*', line: 'session.use_trans_sid = 0' }    
    - { regxp: '^;opcache.enable.*', line: 'opcache.enable = 1' }
    - { regxp: '^;opcache.enable_cli.*', line: 'opcache.enable_cli = 1' }
    - { regxp: '^;opcache.memory_consumption.*', line: 'opcache.;opcache.memory_consumption = 64' }
    - { regxp: '^;opcache.interned_strings_buffer.*', line: 'opcache.interned_strings_buffer = 8' }
    - { regxp: '^;opcache.max_accelerated_files.*', line: 'opcache.max_accelerated_files = 8000' }
    - { regxp: '^;opcache.max_wasted_percentage.*', line: 'opcache.max_wasted_percentage = 5' }
    - { regxp: '^;opcache.validate_timestamps.*', line: 'opcache.validate_timestamps = 1' }
    - { regxp: '^;opcache.revalidate_freq.*', line: 'opcache.revalidate_freq = 60' }
    - { regxp: '^;opcache.fast_shutdown.*', line: 'opcache.fast_shutdown = 1' }
  when: php7_exist.stat.exists == True

- name: start MySQL database server
  service:
    name: mysql
    state: started

- name: generate password {{ install_role_name }} db user
  command: /usr/bin/openssl rand -base64 16
  register: wiki_db_passwd

- name: remove existing {{ install_role_name }} db user
  mysql_user:
    name: "{{ mediawiki_db_user }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    state: absent

- name: create {{ install_role_name }} db user
  mysql_user:
    name: "{{ mediawiki_db_user }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    password: "{{ wiki_db_passwd.stdout }}"
    priv: "{{ mediawiki_db_name }}.*:ALL"
    state: present

- name: remove existing {{ install_role_name }} database
  mysql_db:
    name: "{{ item.name }}"
    login_user: root
    login_password: "{{ target_root_password }}"    
    state: absent
  with_items:
    - { name: "{{ mediawiki_db_name }}" }
    
- name: create {{ install_role_name }} database
  mysql_db:
    name: "{{ item.name }}"
    login_user: root
    login_password: "{{ target_root_password }}"
    collation: "{{ item.collation | default('utf8_general_ci') }}"
    encoding: "{{ item.encoding | default('utf8') }}"
    state: present
  with_items:
    - { name: "{{ mediawiki_db_name }}" }

- name: stop NTP services
  service:
    name: ntp
    state: stopped

- name: change system date before initialize database
  command: date --set 'Oct 1 2016'

- name: initialize {{ install_role_name }} database
  command: >
    php {{ mediawiki_root }}/maintenance/install.php \
      --dbuser {{ mediawiki_db_user }} --dbpass {{ wiki_db_passwd.stdout }} \
      --dbname {{ mediawiki_db_name }} --dbserver localhost --dbtype mysql --dbprefix wiki_ \
      --email {{ mediawiki_admin_email }} \
      --installdbuser {{ mediawiki_db_user }} --installdbpass {{ wiki_db_passwd.stdout }} \
      --server http://{{ mediawiki_server }} --pass {{ mediawiki_admin_password }} \
      {{ mediawiki_admin_user }}
    chdir={{ mediawiki_root }}

- name: restore system date after initialize database
  command: ntpdate 0.au.pool.ntp.org

- name: start NTP services
  service:
    name: ntp
    state: started

- name: copy {{ install_role_name }} configure files
  template:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
    backup: yes
  with_items: "{{ mediawiki_configuration }}"

- name: copy {{ install_role_name }} configure files
  template:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
    backup: yes
  with_items: "{{ mediawiki_Editor_VE_configuration }}"
  when: mediawiki_editor == 'VisualEditor'

- name: start {{ install_role_name }} parsoid service
  service:
    name: parsoid
    state: started
  when: mediawiki_editor == 'VisualEditor'

- name: restart Web server service
  service:
    name: nginx
    state: restarted

- name: start Docker services
  service:
    name: docker
    state: started

- name: create searchEngine docker image
  shell: "{{ mediawiki_root }}/{{ item }}
          chdir={{ mediawiki_root }}"
  with_items:
    - 'searchEngine.sh'
  when: docker_search
