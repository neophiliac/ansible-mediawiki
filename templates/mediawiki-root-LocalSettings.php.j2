<?php
# This file was automatically generated by the MediaWiki 1.25.5
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "{{ mediawiki_sitename }}";
$wgMetaNamespace = "{{ mediawiki_sitename | replace(" ","_") | lower }}";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/w";
$wgArticlePath = "/wiki/$1";
$wgScriptExtension = ".php";
$wgUsePathInfo = true;

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://{{ mediawiki_server }}";

## The relative URL path to the skins directory
$wgStylePath = "$wgScriptPath/skins";
$wgResourceBasePath = $wgScriptPath;

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo = "{{ mediawiki_logo }}";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "postmaster@{{ target_host_domain }}";
$wgPasswordSender = "postmaster@{{ target_host_domain }}";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = false;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "yongxin_webdb";
$wgDBuser = "{{ mediawiki_db_user }}";
$wgDBpassword = "{{ wiki_db_passwd.stdout }}";

# MySQL specific settings
$wgDBprefix = "wiki_";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
$wgHashedUploadDirectory = true;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
$wgCacheDirectory = "$IP/cache";

## Set $wgAllowExternalImages to allow external images to be rendered
## inline with text.
## Default value: false
$wgAllowExternalImages = true;

## Set $wgAllowImageTag to allow <img> tag to be used in wikitext
## Default value: false
$wgAllowImageTag = true;

# Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "c130a01363104bbedff4122a21e1ef0fe1889ba72f40c31521e174d1155616f7";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "626ff68b75ed37e9";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;

# This location where uploaded files will be stored.
$wgUploadDirectory = "{$IP}/images";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
{% if mediawiki_skins is defined and mediawiki_skins %}
{% for item in mediawiki_skins %}
require_once "$IP/skins/{{ item.package }}/{{ item.package }}.php";
{% endfor %}
{% endif %}

# Enabled Extensions. Most extensions are enabled by including the base extension file here
# but check specific extension documentation for more details
# The following extensions were automatically enabled:
{% if mediawiki_extensions is defined and mediawiki_extensions %}
{% for item in mediawiki_extensions %}
require_once "$IP/extensions/{{ item.package }}/{{ item.package }}.php";
{% endfor %}
{% endif %}

# Enables MobileFrontend extension to provides a mobile-friendly view.
$wgMFAutodetectMobileView = true;

## Enables VisualEditor extension and Linking with Parsoid Service
# Enable VisualEditor by default for everybody
$wgDefaultUserOptions['visualeditor-enable'] = 1;

# Don't allow users to disable it
$wgHiddenPrefs[] = 'visualeditor-enable';

# OPTIONAL: Enable VisualEditor's experimental code features
#$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;

# Linking with Parsoid
$wgVirtualRestConfig['modules']['parsoid'] = array(
  // URL to the Parsoid instance
  // Use port 8142 if you use the Debian package
  'url' => 'http://{{ mediawiki_server }}:9001',
  // Parsoid "domain", see below (optional)
  'domain' => 'localhost',
  // Parsoid "prefix", see below (optional)
  'prefix' => 'core_wiki'
);

## Enables WikiEditor extension
# Enable WikiEditor by default but still allows users to disable it in preferences
$wgDefaultUserOptions['usebetatoolbar'] = 1;

# Enables link and table wizards by default but still allows users to disable them in preferences
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;

# Displays the Preview and Changes tabs
$wgDefaultUserOptions['wikieditor-preview'] = 1;

# Displays the Publish and Cancel buttons on the top right side
$wgDefaultUserOptions['wikieditor-publish'] = 1;

## Enables PDF upload and PdfHandler extension
$wgFileExtensions[] = 'pdf';
$wgPdfProcessor = 'gs';
$wgPdfPostProcessor = $wgImageMagickConvertCommand;
$wgPdfInfo = 'pdfinfo';
$wgPdftoText = 'pdftotext';

## This is the list of preferred extensions for uploading files
## Uploading files with extensions not in this list will trigger a warning.
// Add several file types to the default array
$wgFileExtensions = array_merge(
    $wgFileExtensions, array(
        'ppt', 'psd','mp3', 'xls', 'xlsx', 'swf', 'doc','docx',
        'odt', 'odc', 'odp', 'odg', 'mpp'
        )
    );

## Universal Language Selector is a tool that allows users to
## select a language and configure its support

## ULS can use geolocation services to suggest languages
## based on the country the user is visiting from.
$wgULSGeoService = true;

## Allow anonymous users to change language with cookie
$wgULSAnonCanChangeLanguage = false;

## Enables CirrusSearch and ElasticSearch in Wiki
## Installation:
## MediaWiki 1.26 --> ElasticSearch 1.7
## MediaWiki 1.25 --> ElasticSearch 1.7 doesn't work
## 1. pull ElasticSearch 1.7.5 image
##    docker pull elasticsearch:1.7
##    or
##    docker pull elasticsearch:1.6
#
## 2. run ElasticSearch with default
##    docker run -d --name searchengine -p 9200:9200 -p 9300:9300 elasticsearch:1.7
##    or
##    docker run -d --name searchengine -p 9200:9200 -p 9300:9300 elasticsearch:1.6
#
## 3. check below option and make sure its uncommit
#$wgDisableSearchUpdate = true;

## 4. configure search servers if you aren't running ElasticSearch on localhost
## should be configured with the servers (names or IP without port).
#$wgCirrusSearchServers = array( 'localhost' );

## 5. Now run this script to generate your elasticsearch index:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/updateSearchIndexConfig.php
#
## 6. Now commit $wgDisableSearchUpdate = true above. Updates should start heading to Elasticsearch.
#
## 7. Next bootstrap the search index by running:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/forceSearchIndex.php --skipLinks --indexOnSkip
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/forceSearchIndex.php --skipParse
#
## 8. Once that is complete uncommit this to funnel queries to ElasticSearch:
#$wgSearchType = 'CirrusSearch';

# End of automatically generated settings.
# Add more configuration options below.

